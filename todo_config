# === Modify .inputrc for Bash input behavior ===
echo "Checking if pedrolucca-inputrc marker exists in .inputrc..."

INPUTRC_FILE="$HOME/.inputrc"
if ! grep -q "# pedrolucca-inputrc" "$INPUTRC_FILE"; then
    echo "Adding inputrc settings to $INPUTRC_FILE..."

    # Add the .inputrc settings
    cat <<'EOF' >> "$INPUTRC_FILE"
# pedrolucca-inputrc
set meta-flag on
set input-meta on
set output-meta on
set convert-meta off
set completion-ignore-case on
set completion-prefix-display-length 2
set show-all-if-ambiguous on
set show-all-if-unmodified on

# Arrow keys match what you've typed so far against your command history
"\e[A": history-search-backward
"\e[B": history-search-forward
"\e[C": forward-char
"\e[D": backward-char

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

$if Bash
    # Be more intelligent when autocompleting by also looking at the text after
    # the cursor. For example, when the current line is "cd ~/src/mozil", and
    # the cursor is on the "z", pressing Tab will not autocomplete it to "cd
    # ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
    # Readline used by Bash 4.)
    set skip-completed-text on

    # Coloring for Bash 4 tab completions.
    set colored-stats on
$endif
EOF

    echo "Inputrc settings added to $INPUTRC_FILE."
else
    echo "pedrolucca-inputrc marker already exists in $INPUTRC_FILE. Skipping."
fi

# === Ensure bash aliases are set in .bashrc ===
echo "Checking if pedrolucca-aliases marker exists in .bashrc..."

BASHRC_FILE="$HOME/.bashrc"
if ! grep -q "# pedrolucca-aliases" "$BASHRC_FILE"; then
    echo "Adding bash aliases to $BASHRC_FILE..."

    # Add bash aliases to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# pedrolucca-aliases
# Directories
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Tools
alias g='git'
alias d='docker'
alias lzg='lazygit'
alias lzd='lazydocker'
#alias bat='batcat'
#alias fd='fdfind'

# File system
alias ls='eza -lh --group-directories-first --icons'
alias lsa='ls -a'
alias lt='eza --tree --level=2 --long --icons --git'
alias lta='lt -a'
alias ff="fzf --preview 'bat --style=numbers --color=always {}'"
alias cd='z'

# SSH
alias xssh='env TERM=xterm-256color ssh'

# Git
alias gcm='git commit -m'
alias gcam='git commit -a -m'
alias gcad='git commit -a --amend'

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# Convert webm files generated by the Gnome screenshot video recorder to mp4s that are more compatible
webm2mp4() {
    input_file="\$1"
    output_file="\${input_file%.webm}.mp4"
    ffmpeg -i "\$input_file" -c:v libx264 -preset slow -crf 22 -c:a aac -b:a 192k "\$output_file"
}

# Write iso file to sd card
iso2sd() {
  input_file="\$1"
  output_device="\$2"

  if [ -z "$input_file" ] || [ -z "$output_device" ]; then
    echo "Usage: iso2sd <input_file> <output_device>"
    echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
    echo -e "\nAvailable SD cards:"
    lsblk -d -o NAME | grep -E '^sd[a-z]' | awk '{print "/dev/"$1}'
  else
    sudo dd bs=4M status=progress oflag=sync if="\$input_file" of="\$output_device"
    sudo eject "\$output_device"
  fi
}
EOF

    echo "Bash aliases added to $BASHRC_FILE."
else
    echo "pedrolucca-aliases marker already exists in $BASHRC_FILE. Skipping."
fi

# === Bash prompt configuration ===
echo "Checking if pedrolucca-prompt marker exists in .bashrc..."

if ! grep -q "# pedrolucca-prompt" "$BASHRC_FILE"; then
    echo "Adding custom prompt to $BASHRC_FILE..."

    # Add prompt settings to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# pedrolucca-prompt
# Technicolor dreams
force_color_prompt=yes
color_prompt=yes

# Simple prompt with path in the window/pane title and caret for typing line
PS1=$'\\uf0a9 '
PS1="\\[\e]0;\\w\\a\\]$PS1"
EOF

    echo "Prompt added to $BASHRC_FILE."
else
    echo "pedrolucca-prompt marker already exists in $BASHRC_FILE. Skipping."
fi

# === Bash History Configuration ===
echo "Checking if pedrolucca-history marker exists in .bashrc..."

if ! grep -q "# pedrolucca-history" "$BASHRC_FILE"; then
    echo "Adding history settings to $BASHRC_FILE..."

    # Add history control settings to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# pedrolucca-history
# History control
shopt -s histappend
HISTCONTROL=ignoreboth
HISTSIZE=32768
HISTFILESIZE="\${HISTSIZE}"
EOF

    echo "History settings added to $BASHRC_FILE."
else
    echo "pedrolucca-history marker already exists in $BASHRC_FILE. Skipping."
fi

# === Mise activation on bashrc file ===
echo "Checking if pedrolucca-mise-activate marker exists in .bashrc..."

BASHRC_FILE="$HOME/.bashrc"  # Define the path to .bashrc file

# Check if the marker exists in the .bashrc file
if ! grep -q "# pedrolucca-mise-activate" "$BASHRC_FILE"; then
    echo "Adding mise activate to $BASHRC_FILE..."

    # Add mise activate block to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# pedrolucca-mise-activate
# Mise Activate
if command -v mise &> /dev/null; then
  eval "\$(mise activate bash)"
fi
EOF

    echo "Mise activate added to $BASHRC_FILE."
else
    echo "pedrolucca-mise-activate marker already exists in $BASHRC_FILE. Skipping."
fi

# === Zoxide activation on bashrc file ===
echo "Checking if zoxide activation marker exists in .bashrc..."

BASHRC_FILE="$HOME/.bashrc"  # Define the path to .bashrc file

# Check if the marker exists in the .bashrc file
if ! grep -q "# zoxide-activate" "$BASHRC_FILE"; then
    echo "Adding zoxide activation to $BASHRC_FILE..."

    # Add zoxide activation block to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# zoxide-activate
# Zoxide Activation
if command -v zoxide &> /dev/null; then
  eval "\$(zoxide init bash)"
fi
EOF

    echo "Zoxide activation added to $BASHRC_FILE."
else
    echo "zoxide-activate marker already exists in $BASHRC_FILE. Skipping."
fi

# === FZF activation on bashrc file ===
echo "Checking if fzf activation marker exists in .bashrc..."

BASHRC_FILE="$HOME/.bashrc"  # Define the path to .bashrc file

# Check if the marker exists in the .bashrc file
if ! grep -q "# fzf-activate" "$BASHRC_FILE"; then
    echo "Adding fzf activation to $BASHRC_FILE..."

    # Add fzf activation block to .bashrc
    cat <<EOF >> "$BASHRC_FILE"

# fzf-activate
# FZF Activation
if command -v fzf &> /dev/null; then
  if [[ -f /usr/share/bash-completion/completions/fzf ]]; then
    source /usr/share/bash-completion/completions/fzf
  fi
  if [[ -f /usr/share/doc/fzf/examples/key-bindings.bash ]]; then
    source /usr/share/doc/fzf/examples/key-bindings.bash
  fi
fi
EOF

    echo "FZF activation added to $BASHRC_FILE."
else
    echo "fzf-activate marker already exists in $BASHRC_FILE. Skipping."
fi

# === Bash Autocompletion activation on bashrc file ===
echo "Checking if bash_completion is sourced in .bashrc..."

BASHRC_FILE="$HOME/.bashrc"  # Define the path to .bashrc file

# Check if the autocompletion source command already exists in the .bashrc file
if ! grep -q "source /usr/share/bash-completion/bash_completion" "$BASHRC_FILE"; then
    echo "Adding bash_completion source to $BASHRC_FILE..."

    # Add autocompletion source to .bashrc
    echo -e "\n# Bash Autocompletion\nsource /usr/share/bash-completion/bash_completion" >> "$BASHRC_FILE"

    echo "Bash autocompletion source added to $BASHRC_FILE."
else
    echo "Bash autocompletion is already sourced in $BASHRC_FILE. Skipping."
fi
